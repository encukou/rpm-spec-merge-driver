#! /usr/bin/env python3

from pathlib import Path
import sys
import re
import argparse
import traceback
import subprocess
import functools
from dataclasses import dataclass
import datetime
import os
import email.utils
import textwrap

VERSION_RE = re.compile(r'Version:(\s*)(\S*)')
RELEASE_RE = re.compile(r'Release:(\s*)([0-9]*)%\{\?dist\}')
CHANGELOG_RE = re.compile(
    r'\*\s*(\w+)\s*(\w+)\s*(\d+)\s*(\d+)\s*([^<]+)<\s*([^>]+)>\s*-\s*(.*)',
    re.DOTALL,
)


def trace(*args, **kwargs):
    kwargs.setdefault('file', sys.stderr)
    print(*args, **kwargs)


@functools.cmp_to_key
def rpmdev_vercmp_key(a, b):
    proc = subprocess.run(['rpmdev-vercmp', a, b], stdout=subprocess.DEVNULL)
    if proc.returncode == 0:
        return 0
    elif proc.returncode == 11:
        return 1
    elif proc.returncode == 12:
        return -1
    else:
        proc.check_returncode()


class Spec:
    def __init__(self, input_path, old_changelog_header=None):
        try:
            with input_path.open(encoding='utf-8') as input_file:
                self.first_lines = []  # lines before the changelog
                self.version_lineno = None
                self.release_lineno = None
                for lineno, line in enumerate(input_file):
                    self.first_lines.append(line)
                    stripped = line.strip()
                    if match := VERSION_RE.fullmatch(stripped):
                        if self.version_lineno:
                            raise ValueError(f'Multiple Version lines')
                        self.version_match = match
                        self.version_lineno = lineno
                        self.version = match[2]
                    if match := RELEASE_RE.fullmatch(stripped):
                        if self.release_lineno:
                            raise ValueError(f'Multiple Release lines')
                        self.release_match = match
                        self.release_lineno = lineno
                        self.release = int(match[2])
                    if stripped == '%changelog':
                        self.changelog = Changelog(
                            input_file,
                            old_changelog_header,
                        )
                        break
                if self.version_lineno is None:
                    raise ValueError(f'No Version line')
                if self.release_lineno is None:
                    raise ValueError(f'No Release line')
                if not self.changelog:
                    raise ValueError(f'No %changelog section')
        except Exception as e:
            raise ValueError(f'Error parsing {input_path}') from e

    def set_version(self, new_version):
        new = f'Version:{self.version_match.group(1)}{new_version}\n'
        self.first_lines[self.version_lineno] = new

    def set_release(self, new_release):
        new = f'Release:{self.release_match.group(1)}{new_release}%{{?dist}}\n'
        self.first_lines[self.release_lineno] = new

    def write_to(self, path):
        result = ''.join(self.first_lines) + self.changelog.to_string()
        path.write_text(result)


@dataclass
class ChangelogEntry:
    header: str
    lines: list


@dataclass
class Changelog:
    whitespace_lines: list
    new_entries: list
    old_entries: list

    def __init__(self, lines, old_changelog_header):
        self.whitespace_lines = []
        self.new_entries = []
        self.old_entries = []
        if old_changelog_header is None:
            entries = self.old_entries
        else:
            old_changelog_header = old_changelog_header.strip()
            entries = self.new_entries
        for line in lines:
            stripped = line.strip()
            if not stripped and not entries:
                whitespace_lines.append(line)
                continue
            if stripped == old_changelog_header:
                entries = self.old_entries
            if match := CHANGELOG_RE.fullmatch(line):
                entries.append(ChangelogEntry(line, [line]))
            else:
                if not entries:
                    raise ValueError(f'changelog does not start with header: {stripped}')
                entries[-1].lines.append(line)
        if not self.old_entries:
            raise ValueError('changelog has no old entries')

    def to_string(self):
        join = ''.join
        def join_entries(entries):
            return join(join(entry.lines) for entry in entries)
        return (
            join(self.whitespace_lines)
            + join_entries(self.new_entries)
            + join_entries(self.old_entries)
        )

    def squash(self, new_changelog, version, release):
        """Return new_entries of this changelog squashed into a single entry

        The returned entry combines the contents of this changelog's
        new entries, and has a single fresh header line.
        """
        header = get_changelog_header(version, release)
        new_entry = ChangelogEntry(header, [header])
        for entry in reversed(self.new_entries):
            while not entry.lines[-1].strip():
                entry.lines.pop()
            new_entry.lines.extend(entry.lines[1:])
        new_entry.lines.append('\n')
        self.new_entries = [new_entry] + new_changelog.new_entries
        return new_entry


def get_changelog_header(version, release):
    r"""Return a changelog header line

    The line is in the RPM spec changelog format, with \n at the end.
    """
    # To make this work, we actually make a scratch commit
    # (but don't put it on a branch), and read info from it.
    proc = subprocess.run(
        # The big number is the hash of an empty tree.
        # It happens to be always available in a Git repo.
        ['git', 'commit-tree', '4b825dc642cb6eb9a060e54bf8d69288fbee4904'],
        check=True,
        stdout=subprocess.PIPE,
        encoding='utf-8',
        input='',
    )
    sha = proc.stdout.strip()
    proc = subprocess.run(
        ['git', 'show', '--pretty=format:%aD %aN <%aE>', sha],
        check=True,
        stdout=subprocess.PIPE,
        encoding='utf-8',
    )
    print(proc.stdout.strip())
    wd, day, mon, year, _, _, rest = proc.stdout.strip().split(' ', 6)
    wd = wd.strip(',')
    return f'* {wd} {mon} {day} {year} {rest} - {version}-{release}\n'


def main(base, main, new, marker_size, pathname):
    """Git merge driver for spec files

    See: https://git-scm.com/docs/gitattributes#_defining_a_custom_merge_driver
    The arguments are the "%O %A %B %L %P" from the above docs;
    the exit code is returned as an integer.
    Path-like arguments must be Paths.

    See README for how this should work.
    """
    try:
        base_spec = Spec(base)
        header = base_spec.changelog.old_entries[0].header
        main_spec = Spec(main, header)
        new_spec = Spec(new, header)
        specs = base_spec, main_spec, new_spec
        max_version = max(
            [base_spec.version, main_spec.version, new_spec.version],
            key=rpmdev_vercmp_key,
        )
        if max_version == main_spec.version:
            release = main_spec.release + 1
        elif max_version == new_spec.version:
            release = new_spec.release
        for spec in specs:
            spec.set_version(max_version)
            spec.set_release(release)

        if main_spec.changelog.new_entries and new_spec.changelog.new_entries:
            new_entry = new_spec.changelog.squash(main_spec.changelog, max_version, release)
            main_spec.changelog.new_entries.insert(0, new_entry)
            new_spec.changelog.new_entries = main_spec.changelog.new_entries

        base_spec.write_to(base)
        main_spec.write_to(main)
        new_spec.write_to(new)

    except BaseException as e:
        traceback.print_exc()

    # It's important that 'git merge-file' is *always* run.
    # It overwrites the "main" file.
    # If that doesn't happen for some reason, the file in the working tree will
    # be replaced by the "MAIN" version, with no conflict markers...
    proc = subprocess.run([
        'git', 'merge-file',
        '-L', f'HEAD',
        '-L', f'merged common ancestors',
        '-L', f'new',
        f'--marker-size={marker_size}',
        main, base, new
    ])

    # git merge-file writes the result to MAIN; write it to NEW as well.
    new.write_text(main.read_text())

    return proc.returncode


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=textwrap.dedent('''
            Three-way merge driver for RPM spec files.

            Takes filenames of three versions of a spec file:
            * BASE (the common ancestor),
            * MAIN (the main branch, which is being merged into and from which
              some builds were possibly made), and
            * NEW (which contains an improvement to be merged in).

            The MAIN and NEW files are *overwritten* with the merge result.
            BASE is overwritten with some arbitrary data.

            The driver adjusts Version, Release and %changelog; then calls
            `git merge-file` to do the bulk of the merge.

            A non-zero exit code means the merge failed and the merge result
            contains conflict markers.
        '''),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument('base', type=Path, metavar='BASE')
    parser.add_argument('main', type=Path, metavar='MAIN')
    parser.add_argument('new', type=Path, metavar='NEW')
    parser.add_argument(
        'marker_size', type=int, nargs='?', default=7,
        help='Size of conflict markers (<<<<<<<, >>>>>>>)'
    )
    parser.add_argument(
        'pathname', nargs='?', default='.spec',
        help='Filename (might be used in error messages and such)'
    )

    exit(main(**vars(parser.parse_args())))
